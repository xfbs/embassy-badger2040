#![allow(non_snake_case)]
use crate::Uc8151;
pub use embassy_rp::peripherals::*;
use embassy_rp::{
    config::Config,
    gpio::{Input, Level, Output, Pull},
};

pub struct Peripherals {
    pub PIN_0: PIN_0,
    pub PIN_1: PIN_1,
    pub PIN_2: PIN_2,
    pub PIN_3: PIN_3,
    pub PIN_4: PIN_4,
    pub PIN_5: PIN_5,
    pub PIN_6: PIN_6,
    pub PIN_7: PIN_7,
    pub PIN_8: PIN_8,
    pub PIN_9: PIN_9,
    pub PIN_ENABLE_3V3: PIN_10,
    pub PIN_22: PIN_22,
    pub PIN_VBUS_DETECT: PIN_24,
    pub PIN_27: PIN_27,
    pub PIN_28: PIN_28,
    pub PIN_BATTERY: PIN_29,
    pub PIN_QSPI_SCLK: PIN_QSPI_SCLK,
    pub PIN_QSPI_SS: PIN_QSPI_SS,
    pub PIN_QSPI_SD0: PIN_QSPI_SD0,
    pub PIN_QSPI_SD1: PIN_QSPI_SD1,
    pub PIN_QSPI_SD2: PIN_QSPI_SD2,
    pub PIN_QSPI_SD3: PIN_QSPI_SD3,
    pub UART0: UART0,
    pub UART1: UART1,
    pub SPI1: SPI1,
    pub I2C0: I2C0,
    pub I2C1: I2C1,
    pub DMA_CH0: DMA_CH0,
    pub DMA_CH1: DMA_CH1,
    pub DMA_CH2: DMA_CH2,
    pub DMA_CH3: DMA_CH3,
    pub DMA_CH4: DMA_CH4,
    pub DMA_CH5: DMA_CH5,
    pub DMA_CH6: DMA_CH6,
    pub DMA_CH7: DMA_CH7,
    pub DMA_CH8: DMA_CH8,
    pub DMA_CH9: DMA_CH9,
    pub DMA_CH10: DMA_CH10,
    pub DMA_CH11: DMA_CH11,
    pub PWM_CH0: PWM_CH0,
    pub PWM_CH1: PWM_CH1,
    pub PWM_CH2: PWM_CH2,
    pub PWM_CH3: PWM_CH3,
    pub PWM_CH4: PWM_CH4,
    pub PWM_CH5: PWM_CH5,
    pub PWM_CH6: PWM_CH6,
    pub PWM_CH7: PWM_CH7,
    pub USB: USB,
    pub RTC: RTC,
    pub FLASH: FLASH,
    pub ADC: ADC,
    pub ADC_TEMP_SENSOR: ADC_TEMP_SENSOR,
    pub CORE1: CORE1,
    pub PIO0: PIO0,
    pub PIO1: PIO1,
    pub WATCHDOG: WATCHDOG,
    pub BOOTSEL: BOOTSEL,
    pub BUTTON_A: Input<'static>,
    pub BUTTON_B: Input<'static>,
    pub BUTTON_C: Input<'static>,
    pub BUTTON_D: Input<'static>,
    pub BUTTON_E: Input<'static>,
    pub BUTTON_USR: Input<'static>,
    pub LED: Output<'static>,
    pub UC8151: Uc8151,
}

pub fn init(config: Config) -> Peripherals {
    let p = embassy_rp::init(config);
    let LED = Output::new(p.PIN_25, Level::Low);
    let UC8151 = Uc8151::new(
        p.SPI0, p.PIN_17, p.PIN_18, p.PIN_19, p.PIN_16, p.PIN_20, p.PIN_21, p.PIN_26,
    );
    Peripherals {
        PIN_0: p.PIN_0,
        PIN_1: p.PIN_1,
        PIN_2: p.PIN_2,
        PIN_3: p.PIN_3,
        PIN_4: p.PIN_4,
        PIN_5: p.PIN_5,
        PIN_6: p.PIN_6,
        PIN_7: p.PIN_7,
        PIN_8: p.PIN_8,
        PIN_9: p.PIN_9,
        PIN_ENABLE_3V3: p.PIN_10,
        PIN_22: p.PIN_22,
        PIN_VBUS_DETECT: p.PIN_24,
        PIN_27: p.PIN_27,
        PIN_28: p.PIN_28,
        PIN_BATTERY: p.PIN_29,
        PIN_QSPI_SCLK: p.PIN_QSPI_SCLK,
        PIN_QSPI_SS: p.PIN_QSPI_SS,
        PIN_QSPI_SD0: p.PIN_QSPI_SD0,
        PIN_QSPI_SD1: p.PIN_QSPI_SD1,
        PIN_QSPI_SD2: p.PIN_QSPI_SD2,
        PIN_QSPI_SD3: p.PIN_QSPI_SD3,
        UART0: p.UART0,
        UART1: p.UART1,
        SPI1: p.SPI1,
        I2C0: p.I2C0,
        I2C1: p.I2C1,
        DMA_CH0: p.DMA_CH0,
        DMA_CH1: p.DMA_CH1,
        DMA_CH2: p.DMA_CH2,
        DMA_CH3: p.DMA_CH3,
        DMA_CH4: p.DMA_CH4,
        DMA_CH5: p.DMA_CH5,
        DMA_CH6: p.DMA_CH6,
        DMA_CH7: p.DMA_CH7,
        DMA_CH8: p.DMA_CH8,
        DMA_CH9: p.DMA_CH9,
        DMA_CH10: p.DMA_CH10,
        DMA_CH11: p.DMA_CH11,
        PWM_CH0: p.PWM_CH0,
        PWM_CH1: p.PWM_CH1,
        PWM_CH2: p.PWM_CH2,
        PWM_CH3: p.PWM_CH3,
        PWM_CH4: p.PWM_CH4,
        PWM_CH5: p.PWM_CH5,
        PWM_CH6: p.PWM_CH6,
        PWM_CH7: p.PWM_CH7,
        USB: p.USB,
        RTC: p.RTC,
        FLASH: p.FLASH,
        ADC: p.ADC,
        ADC_TEMP_SENSOR: p.ADC_TEMP_SENSOR,
        CORE1: p.CORE1,
        PIO0: p.PIO0,
        PIO1: p.PIO1,
        WATCHDOG: p.WATCHDOG,
        BOOTSEL: p.BOOTSEL,
        LED,
        UC8151,
        BUTTON_A: Input::new(p.PIN_12, Pull::Down),
        BUTTON_B: Input::new(p.PIN_13, Pull::Down),
        BUTTON_C: Input::new(p.PIN_14, Pull::Down),
        BUTTON_D: Input::new(p.PIN_15, Pull::Down),
        BUTTON_E: Input::new(p.PIN_11, Pull::Down),
        BUTTON_USR: Input::new(p.PIN_23, Pull::Down),
    }
}
